{"remainingRequest":"/Users/user/coding/PAPER_htmlgame/htmlgame/new_demoggc/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/Users/user/coding/PAPER_htmlgame/htmlgame/new_demoggc/src/components/QuizArea.vue?vue&type=template&id=150743b2","dependencies":[{"path":"/Users/user/coding/PAPER_htmlgame/htmlgame/new_demoggc/src/components/QuizArea.vue","mtime":1639406275859},{"path":"/Users/user/coding/PAPER_htmlgame/htmlgame/new_demoggc/node_modules/cache-loader/dist/cjs.js","mtime":1638710602619},{"path":"/Users/user/coding/PAPER_htmlgame/htmlgame/new_demoggc/node_modules/babel-loader/lib/index.js","mtime":1638710602487},{"path":"/Users/user/coding/PAPER_htmlgame/htmlgame/new_demoggc/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1638710607170},{"path":"/Users/user/coding/PAPER_htmlgame/htmlgame/new_demoggc/node_modules/cache-loader/dist/cjs.js","mtime":1638710602619},{"path":"/Users/user/coding/PAPER_htmlgame/htmlgame/new_demoggc/node_modules/vue-loader-v16/dist/index.js","mtime":1638710607165}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgPHNsb3Q+CiAgPGRpdiBjbGFzcz0iYnV0dG9ucyI+CiAgICA8YnV0dG9uIEBjbGljaz0icmVmcmVzaFF1aXoiIGlkPSJyZWZyZXNoUXVpeiI+CiAgICAgIDxpbWcgc3JjPSIuLi9hc3NldHMvcmVmcmVzaC1wYWdlLW9wdGlvbi5wbmciIGFsdD0i7LSI6riw7ZmUIj4KICAgIDwvYnV0dG9uPgogICAgPHVsPgogICAgICA8YnV0dG9uIEBjbGljaz0iYmFjayIgaWQ9ImJhY2tRdWl6Ij4KICAgICAgICA8aW1nIHNyYz0iLi4vYXNzZXRzL3JldHVybi5wbmciIGFsdD0i65Kk66Gc6rCA6riwIj4KICAgICAgPC9idXR0b24+CiAgICAgIDxidXR0b24gQGNsaWNrPSJmb3J3YXJkIiBpZD0iZm9yd2FyZFF1aXoiPgogICAgICAgIDxpbWcgc3JjPSIuLi9hc3NldHMvbmV4dC5wbmciIGFsdD0i7JWe7Jy866Gc6rCA6riwIj4KICAgICAgPC9idXR0b24+CiAgICA8L3VsPgogIDwvZGl2PgogIDxFcnJvclBvcHVwLz4KICA8dGFibGUgcmVmPSJ0YWJsZSIgaWQ9IlF1aXotYXJlYSI+CiAgICA8dHIgdi1mb3I9IihpdGVtLCBpbmRleCkgaW4gcXVpemxldHRlcnNldCIKICAgICAgOmtleT0iaXRlbS5pZCIKICAgICAgOmFyaWEtcm93aW5kZXg9ImluZGV4Ij4KICAgICAgPExldHRlcgogICAgICBAY2xpY2tPbkxldHRlcj0idXBkYXRlVGFyZ2V0IgogICAgICBAdG9nZ2xlQ2hvaWNlPSJwcENob2ljZSIKICAgICAgICA6cm93SW5kZXg9ImluZGV4IgogICAgICAgIHYtZm9yPSIodmFsdWUsIG5hbWUpIGluIGl0ZW0iCiAgICAgICAgOmtleT0ibmFtZS5pZCIgOmNvbEluZGV4PSJuYW1lIgogICAgICAgIDpsZXR0ZXI9InZhbHVlLmxldHRlciIKICAgICAgICA6aXNUYXJnZXQ9InZhbHVlLmlzVGFyZ2V0IgogICAgICAgIDppc0Nob2ljZT0idmFsdWUuaXNDaG9pY2UiCiAgICAgICAgOmlzQ2hvc2VuPSJ2YWx1ZS5pc0Nob3NlbiIKICAgICAgICA6aXNBbnN3ZXI9InZhbHVlLmlzQW5zd2VyIgogICAgICAgIDppc1dvcmQ9InZhbHVlLmlzV29yZCIKICAgICAgICAvPgogICAgPC90cj4KICA8L3RhYmxlPgogIDwvc2xvdD4KICA8T3B0aW9uc01lbnUgQGNsaWNrT3B0aW9uPSJzaG93Q2hvaWNlIi8+Cg=="},{"version":3,"sources":["/Users/user/coding/PAPER_htmlgame/htmlgame/new_demoggc/src/components/QuizArea.vue"],"names":[],"mappings":"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","file":"/Users/user/coding/PAPER_htmlgame/htmlgame/new_demoggc/src/components/QuizArea.vue","sourceRoot":"","sourcesContent":["<template>\n  <slot>\n  <div class=\"buttons\">\n    <button @click=\"refreshQuiz\" id=\"refreshQuiz\">\n      <img src=\"../assets/refresh-page-option.png\" alt=\"초기화\">\n    </button>\n    <ul>\n      <button @click=\"back\" id=\"backQuiz\">\n        <img src=\"../assets/return.png\" alt=\"뒤로가기\">\n      </button>\n      <button @click=\"forward\" id=\"forwardQuiz\">\n        <img src=\"../assets/next.png\" alt=\"앞으로가기\">\n      </button>\n    </ul>\n  </div>\n  <ErrorPopup/>\n  <table ref=\"table\" id=\"Quiz-area\">\n    <tr v-for=\"(item, index) in quizletterset\"\n      :key=\"item.id\"\n      :aria-rowindex=\"index\">\n      <Letter\n      @clickOnLetter=\"updateTarget\"\n      @toggleChoice=\"ppChoice\"\n        :rowIndex=\"index\"\n        v-for=\"(value, name) in item\"\n        :key=\"name.id\" :colIndex=\"name\"\n        :letter=\"value.letter\"\n        :isTarget=\"value.isTarget\"\n        :isChoice=\"value.isChoice\"\n        :isChosen=\"value.isChosen\"\n        :isAnswer=\"value.isAnswer\"\n        :isWord=\"value.isWord\"\n        />\n    </tr>\n  </table>\n  </slot>\n  <OptionsMenu @clickOption=\"showChoice\"/>\n</template>\n\n<script>\nimport { ref } from 'vue'\nimport Letter from './Letter.vue'\nimport OptionsMenu from './OptionsMenu.vue'\nimport ErrorPopup from './QuizError/ErrorPopup.vue'\nimport wordlist from '../assets/wordlist.json'\nimport mergelist from '../assets/valid_mergewordlist.json'\n\nexport default {\n    name: 'QuizArea',\n    components: { Letter, OptionsMenu, ErrorPopup },\n    props: [ 'quizletterset' ],\n    data() {\n      return {\n        wordlist: wordlist,\n        mergelist: mergelist,\n        chosen: ref([]),\n        defaultSet: ref([]),\n        pastSet: ref([]),\n        maxChosen: ref(Number)\n      }\n    },\n    beforeMount() {\n      // used when refreshQuiz()\n      this.defaultSet = quizletterset\n    },\n    methods: {\n      updateTarget(data) {\n        if (this.$refs.table.querySelector('td.choice,td.chosen')&&this.quizletterset[data.row][data.col].isTarget) {\n          // forceword()\n          this.word(this.chosen)\n        } else {\n          // toggle target\n          this.quizletterset[data.row][data.col].isTarget = !this.quizletterset[data.row][data.col].isTarget\n          this.emitter.emit('toggleShow', {'show':this.quizletterset[data.row][data.col].isTarget, 'x':data.x, 'y':data.y})\n\n          if (this.quizletterset[data.row][data.col].isTarget) {\n            this.chosen.length = 0\n            this.chosen.push({'row': data.row, 'col': data.col})\n\n            for (let r=0;r<6;r++) {\n              for (let c=0;c<15;c++) {\n                if (r != data.row||c != data.col) {\n                  // reset\n                  this.quizletterset[r][c].isTarget = false\n                  this.quizletterset[r][c].isChoice = false\n                  this.quizletterset[r][c].isChosen = false\n                }\n              }\n            }\n          }\n        }\n      },\n      showChoice(data) {\n        let target = this.chosen[0]\n\n        if (data == 'merge') {\n          this.maxChosen = 2\n\n          switch (target.col) {\n            case 0:\n              this.quizletterset[target.row][target.col+1].isChoice = true\n              break\n\n            case 14:\n              this.quizletterset[target.row][target.col-1].isChoice = true\n              break\n\n            default:\n              this.quizletterset[target.row][target.col-1].isChoice = true\n              this.quizletterset[target.row][target.col+1].isChoice = true\n          }\n        } else if (data == 'word') {\n          this.maxChosen = 6\n\n          try {\n            this.quizletterset[target.row][target.col+1].isChoice = true\n            this.quizletterset[target.row+1][target.col].isChoice = true\n            this.quizletterset[target.row+1][target.col+1].isChoice = true\n            this.quizletterset[target.row+2][target.col].isChoice = true\n            this.quizletterset[target.row+2][target.col+1].isChoice = true\n          } catch (TypeError) {\n            // show error popup\n            this.emitter.emit('showPopup', 'wordspace')\n          }\n        } else {\n          // data === null\n          let wordspace = {'0,0':null, '1,0':null, '0,1':null, '1,1':null, '0,2':null, '1,2':null}\n\n          try {\n            for (let coord in wordspace) {\n            let x = parseInt(coord.split(',')[0])\n            let y = parseInt(coord.split(',')[1])\n\n            if (coord == '1,1'||this.quizletterset[target.row+y][target.col+x].letter) {\n              wordspace[coord] = null\n            } else {\n              wordspace[coord] = this.quizletterset[target.row+y][target.col+x].letter\n            }\n          }\n\n          this.space(wordspace)\n          } catch (TypeError) {\n            // show error popup\n            this.emitter.emit('showPopup', 'wordspace')\n          }\n        }\n      },\n      merge(arr) {\n        const l1 = this.quizletterset[arr[0].row][arr[0].col].letter\n        const l2 = this.quizletterset[arr[1].row][arr[1].col].letter\n\n        if (mergelist.valid[`${l1}`].includes(`${l2}`)) {\n          this.quizletterset[arr[0].row][Math.min(arr[0].col, arr[1].col)].letter = this.mergelist.merge[`${l1},${l2}`]\n          this.quizletterset[arr[0].row][Math.max(arr[0].col, arr[1].col)].letter = ''\n        } else {\n          // show error popup\n          this.emitter.emit('showPopup', 'merge')\n        }\n\n        // reset()\n        for (let r=0;r<6;r++) {\n          for (let c=0;c<15;c++) {\n              this.quizletterset[r][c].isTarget = false\n              this.quizletterset[r][c].isChoice = false\n              this.quizletterset[r][c].isChosen = false\n          }\n        }\n      },\n      word(arr) {\n        let wordspace = {'0,0':null, '1,0':null, '0,1':null, '1,1':null, '0,2':null, '1,2':null}\n\n        for (let n=0;n<arr.length;n++) {\n          \n          if (this.quizletterset[arr[n].row][arr[n].col] == '') {\n            wordspace[`${arr[n].col-arr[0].col},${arr[n].row-arr[0].row}`] = null\n          } else {\n            wordspace[`${arr[n].col-arr[0].col},${arr[n].row-arr[0].row}`] = this.quizletterset[arr[n].row][arr[n].col].letter\n          }\n        }\n\n        let index = Object.values(this.wordlist).findIndex(element => this.compare_obj(element, wordspace))\n        if (index != -1) {\n          this.quizletterset[arr[0].row][arr[0].col].letter = Object.keys(this.wordlist)[index]\n          this.quizletterset[arr[0].row][arr[0].col].isWord = true\n\n          delete this.quizletterset[arr[0].row][arr[0].col+1]\n          delete this.quizletterset[arr[0].row+1][arr[0].col]\n          delete this.quizletterset[arr[0].row+1][arr[0].col+1]\n          delete this.quizletterset[arr[0].row+2][arr[0].col]\n          delete this.quizletterset[arr[0].row+2][arr[0].col+1]\n        } else {\n          // show error popup\n          this.emitter.emit('showPopup', 'word')\n        }\n\n        // reset()\n        for (let r=0;r<6;r++) {\n          for (let c=0;c<15;c++) {\n              this.quizletterset[r][c].isTarget = false\n              this.quizletterset[r][c].isChoice = false\n              this.quizletterset[r][c].isChosen = false\n          }\n        }\n      },\n      compare_obj(a, b) {\n        // compare 2 objects\n        // if identical, return true\n        // else, return false\n\n        let n = 0;\n        let compare = true;\n        while (compare && n < 6) {\n          if (Object.values(a)[n] === Object.values(b)[n])\n            n = n + 1;\n          else\n            compare = false;\n        }\n\n        return compare;\n      },\n      ppChoice(data) {\n        if (data.action === 'push') {\n          // toggle isChoice/isChosen\n          this.quizletterset[data.choice.row][data.choice.col].isChosen = true\n          this.quizletterset[data.choice.row][data.choice.col].isChoice = false\n\n          this.chosen.push(data.choice)\n\n          if (this.chosen.length == this.maxChosen) {\n              // merge()\n              this.merge(this.chosen)\n          }\n        } else {\n          // data.type === 'pop'\n          // toggle isChoice/isChosen\n          this.quizletterset[data.choice.row][data.choice.col].isChosen = false\n          this.quizletterset[data.choice.row][data.choice.col].isChoice = true\n\n          const i = this.chosen.indexOf(data.choice)\n          this.chosen.splice(i,1)\n        }\n      },\n      space(wordspace) {\n        let target = this.chosen[0]\n\n        if (wordspace in Object.values(this.wordlist)) {\n          // show error popup\n          this.emitter.emit('showPopup', 'space')\n        } else {\n          for (let coord in wordspace) {\n            let x = parseInt(coord.split(',')[0])\n            let y = parseInt(coord.split(',')[1])\n\n            this.quizletterset[target.row+y][target.col+x].letter = ''\n          }\n        }\n      },\n      refreshQuiz() {\n        this.quizletterset = this.defaultSet\n      }\n  }\n}\n</script>"]}]}