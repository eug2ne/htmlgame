{"remainingRequest":"/Users/eugenekang/Documents/GitHub/htmlgame/quizengine_test/node_modules/babel-loader/lib/index.js!/Users/eugenekang/Documents/GitHub/htmlgame/quizengine_test/src/composables/quizlibrary/backforth.js","dependencies":[{"path":"/Users/eugenekang/Documents/GitHub/htmlgame/quizengine_test/src/composables/quizlibrary/backforth.js","mtime":1642949743505},{"path":"/Users/eugenekang/Documents/GitHub/htmlgame/quizengine_test/babel.config.js","mtime":1642949743496},{"path":"/Users/eugenekang/Documents/GitHub/htmlgame/quizengine_test/node_modules/cache-loader/dist/cjs.js","mtime":1643433884430},{"path":"/Users/eugenekang/Documents/GitHub/htmlgame/quizengine_test/node_modules/babel-loader/lib/index.js","mtime":1643433884386}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc3BsaWNlLmpzIjsKaW1wb3J0IF8gZnJvbSAnbG9kYXNoJzsKCnZhciBiYWNrZm9ydGggPSBmdW5jdGlvbiBiYWNrZm9ydGgoKSB7CiAgdmFyIHVwZGF0ZXBhc3RTZXQgPSBmdW5jdGlvbiB1cGRhdGVwYXN0U2V0KHBhc3RTZXQsIHNldCkgewogICAgdmFyIGJlZm9yZXVwZGF0ZSA9IF8uY2xvbmVEZWVwKHNldCk7CgogICAgcGFzdFNldC5wdXNoKGJlZm9yZXVwZGF0ZSk7IC8vIHBhc3RTZXQgbWF4X2xlbmd0aCA9PSA1CgogICAgaWYgKHBhc3RTZXQubGVuZ3RoID4gNSkgewogICAgICBwYXN0U2V0LnNwbGljZSgwLCAxKTsKICAgIH0gZWxzZSB7Ly8gcGFzcwogICAgfQogIH07CgogIHZhciB1cGRhdGVmb3J3YXJkU2V0ID0gZnVuY3Rpb24gdXBkYXRlZm9yd2FyZFNldChmb3J3YXJkU2V0LCBzZXQpIHsKICAgIGNvbnNvbGUubG9nKCd1cGRhdGVmb3J3YXJkJyk7CgogICAgdmFyIGFmdGVydXBkYXRlID0gXy5jbG9uZURlZXAoc2V0KTsKCiAgICBmb3J3YXJkU2V0LnB1c2goYWZ0ZXJ1cGRhdGUpOyAvLyBmb3J3YXJkU2V0IG1heF9sZW5ndGggPT0gNQoKICAgIGlmIChmb3J3YXJkU2V0Lmxlbmd0aCA+IDUpIHsKICAgICAgZm9yd2FyZFNldC5zcGxpY2UoMCwgMSk7CiAgICB9IGVsc2Ugey8vIHBhc3MKICAgIH0KICB9OyAvLyBiYWNrIGZ1bmMKCgogIHZhciBiYWNrID0gZnVuY3Rpb24gYmFjayhwYXN0U2V0LCBmb3J3YXJkU2V0LCBzZXQpIHsKICAgIC8vIHNldDogcHJlc2VudCBzZXQKICAgIGNvbnNvbGUubG9nKCdiYWNrJyk7CiAgICB2YXIgYmVmb3JlID0gcGFzdFNldC5wb3AoKTsKICAgIHVwZGF0ZWZvcndhcmRTZXQoZm9yd2FyZFNldCwgc2V0KTsKICAgIHJldHVybiBiZWZvcmU7CiAgfTsgLy8gZm9yd2FyZCBmdW5jCgoKICB2YXIgZm9yd2FyZCA9IGZ1bmN0aW9uIGZvcndhcmQocGFzdFNldCwgZm9yd2FyZFNldCwgc2V0KSB7CiAgICAvLyBzZXQ6IHByZXNlbnQgc2V0CiAgICBjb25zb2xlLmxvZygnZm9yd2FyZCcpOwogICAgdmFyIGFmdGVyID0gZm9yd2FyZFNldC5wb3AoKTsKICAgIHVwZGF0ZXBhc3RTZXQocGFzdFNldCwgc2V0KTsKICAgIHJldHVybiBhZnRlcjsKICB9OwoKICByZXR1cm4gewogICAgdXBkYXRlcGFzdFNldDogdXBkYXRlcGFzdFNldCwKICAgIHVwZGF0ZWZvcndhcmRTZXQ6IHVwZGF0ZWZvcndhcmRTZXQsCiAgICBiYWNrOiBiYWNrLAogICAgZm9yd2FyZDogZm9yd2FyZAogIH07Cn07CgpleHBvcnQgZGVmYXVsdCBiYWNrZm9ydGg7"},{"version":3,"sources":["/Users/eugenekang/Documents/GitHub/htmlgame/quizengine_test/src/composables/quizlibrary/backforth.js"],"names":["_","backforth","updatepastSet","pastSet","set","beforeupdate","cloneDeep","push","length","splice","updateforwardSet","forwardSet","console","log","afterupdate","back","before","pop","forward","after"],"mappings":";AAAA,OAAOA,CAAP,MAAc,QAAd;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AACpB,MAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,OAAD,EAAUC,GAAV,EAAkB;AACpC,QAAMC,YAAY,GAAGL,CAAC,CAACM,SAAF,CAAYF,GAAZ,CAArB;;AACAD,IAAAA,OAAO,CAACI,IAAR,CAAaF,YAAb,EAFoC,CAIpC;;AACA,QAAIF,OAAO,CAACK,MAAR,GAAiB,CAArB,EAAwB;AACpBL,MAAAA,OAAO,CAACM,MAAR,CAAe,CAAf,EAAiB,CAAjB;AACH,KAFD,MAEO,CACH;AACH;AACJ,GAVD;;AAYA,MAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,UAAD,EAAaP,GAAb,EAAqB;AAC1CQ,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;;AACA,QAAMC,WAAW,GAAGd,CAAC,CAACM,SAAF,CAAYF,GAAZ,CAApB;;AACAO,IAAAA,UAAU,CAACJ,IAAX,CAAgBO,WAAhB,EAH0C,CAK1C;;AACA,QAAIH,UAAU,CAACH,MAAX,GAAoB,CAAxB,EAA2B;AACvBG,MAAAA,UAAU,CAACF,MAAX,CAAkB,CAAlB,EAAoB,CAApB;AACH,KAFD,MAEO,CACH;AACH;AACJ,GAXD,CAboB,CA0BpB;;;AACA,MAAMM,IAAI,GAAG,SAAPA,IAAO,CAACZ,OAAD,EAAUQ,UAAV,EAAsBP,GAAtB,EAA8B;AACvC;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACA,QAAMG,MAAM,GAAGb,OAAO,CAACc,GAAR,EAAf;AACAP,IAAAA,gBAAgB,CAACC,UAAD,EAAaP,GAAb,CAAhB;AACA,WAAOY,MAAP;AACH,GAND,CA3BoB,CAmCpB;;;AACA,MAAME,OAAO,GAAG,SAAVA,OAAU,CAACf,OAAD,EAAUQ,UAAV,EAAsBP,GAAtB,EAA8B;AAC1C;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACA,QAAMM,KAAK,GAAGR,UAAU,CAACM,GAAX,EAAd;AACAf,IAAAA,aAAa,CAACC,OAAD,EAAUC,GAAV,CAAb;AACA,WAAOe,KAAP;AACH,GAND;;AAQA,SAAO;AAAEjB,IAAAA,aAAa,EAAbA,aAAF;AAAiBQ,IAAAA,gBAAgB,EAAhBA,gBAAjB;AAAmCK,IAAAA,IAAI,EAAJA,IAAnC;AAAyCG,IAAAA,OAAO,EAAPA;AAAzC,GAAP;AACH,CA7CD;;AA+CA,eAAejB,SAAf","sourcesContent":["import _ from 'lodash'\n\nconst backforth = () => {\n    const updatepastSet = (pastSet, set) => {\n        const beforeupdate = _.cloneDeep(set)\n        pastSet.push(beforeupdate)\n\n        // pastSet max_length == 5\n        if (pastSet.length > 5) {\n            pastSet.splice(0,1)\n        } else {\n            // pass\n        }\n    }\n\n    const updateforwardSet = (forwardSet, set) => {\n        console.log('updateforward')\n        const afterupdate = _.cloneDeep(set)\n        forwardSet.push(afterupdate)\n\n        // forwardSet max_length == 5\n        if (forwardSet.length > 5) {\n            forwardSet.splice(0,1)\n        } else {\n            // pass\n        }\n    }\n\n    // back func\n    const back = (pastSet, forwardSet, set) => {\n        // set: present set\n        console.log('back')\n        const before = pastSet.pop()\n        updateforwardSet(forwardSet, set)\n        return before\n    }\n\n    // forward func\n    const forward = (pastSet, forwardSet, set) => {\n        // set: present set\n        console.log('forward')\n        const after = forwardSet.pop()\n        updatepastSet(pastSet, set)\n        return after\n    }\n\n    return { updatepastSet, updateforwardSet, back, forward }\n}\n\nexport default backforth"]}]}