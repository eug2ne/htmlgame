{"remainingRequest":"/Users/eugenekang/Documents/GitHub/htmlgame/quizengine_test/node_modules/babel-loader/lib/index.js!/Users/eugenekang/Documents/GitHub/htmlgame/quizengine_test/src/composables/quizlibrary/importSet.js","dependencies":[{"path":"/Users/eugenekang/Documents/GitHub/htmlgame/quizengine_test/src/composables/quizlibrary/importSet.js","mtime":1643438235513},{"path":"/Users/eugenekang/Documents/GitHub/htmlgame/quizengine_test/babel.config.js","mtime":1642949743496},{"path":"/Users/eugenekang/Documents/GitHub/htmlgame/quizengine_test/node_modules/cache-loader/dist/cjs.js","mtime":1643433884430},{"path":"/Users/eugenekang/Documents/GitHub/htmlgame/quizengine_test/node_modules/babel-loader/lib/index.js","mtime":1643433884386}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9Vc2Vycy9ldWdlbmVrYW5nL0RvY3VtZW50cy9HaXRIdWIvaHRtbGdhbWUvcXVpemVuZ2luZV90ZXN0L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yLmpzIjsKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiOwppbXBvcnQgeyBkYiB9IGZyb20gJy4uLy4uL2ZpcmVzdG9yZURCJzsKaW1wb3J0IHsgcmVmIH0gZnJvbSAndnVlJzsKaW1wb3J0IHsgZG9jLCBzZXREb2MsIGdldERvYyB9IGZyb20gJ2ZpcmViYXNlL2ZpcmVzdG9yZSc7Cgp2YXIgaW1wb3J0U2V0ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICB2YXIgX3JlZiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZShxdWl6X2lkLCB1c2VyKSB7CiAgICB2YXIgZGVmYXVsdFNldCwgdXNlclJlZiwgc2V0UmVmLCB1c2VyU25hcCwgZGVmYXVsdFNuYXAsIHVzZXJfaWQsIHVzZXJfcXVpenN0YXR1c1JlZiwgdXNlcl9xdWl6c3RhdHVzU25hcCwgcXVpemluc3RhbmNlLCBfcXVpemluc3RhbmNlLCBuZXdTbmFwLCBfdXNlcl9pZCwgX3VzZXJfcXVpenN0YXR1c1JlZiwgX3VzZXJfcXVpenN0YXR1c1NuYXAsIF9xdWl6aW5zdGFuY2UyOwoKICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgZGVmYXVsdFNldCA9IHJlZih7fSk7IC8vIGltcG9ydCBzZXQgZnJvbSBkYgoKICAgICAgICAgICAgdXNlclJlZiA9IGRiLmNvbGxlY3Rpb24oJ1VzZXJzJykud2hlcmUoJ3VzZXJfbmFtZScsICc9PScsIHVzZXIpOwogICAgICAgICAgICBzZXRSZWYgPSBkb2MoZGIsICdRdWl6U2V0JywgcXVpel9pZCk7CiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA1OwogICAgICAgICAgICByZXR1cm4gdXNlclJlZi5nZXQoKTsKCiAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA3OwogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc2VudC5kb2NzWzBdOwoKICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgdXNlclNuYXAgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTA7CiAgICAgICAgICAgIHJldHVybiBnZXREb2Moc2V0UmVmKTsKCiAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICBkZWZhdWx0U25hcCA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgIGRlZmF1bHRTZXQudmFsdWUgPSBkZWZhdWx0U25hcC5kYXRhKCk7CgogICAgICAgICAgICBpZiAoIXVzZXJTbmFwKSB7CiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDI5OwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBpZiB1c2VyIGFscmVhZHkgaW4gVXNlcnMKICAgICAgICAgICAgdXNlcl9pZCA9IHVzZXJTbmFwLmlkOwogICAgICAgICAgICB1c2VyX3F1aXpzdGF0dXNSZWYgPSBkYi5jb2xsZWN0aW9uKCdVc2VycycpLmRvYygncXVpenN0YXR1cycpLmNvbGxlY3Rpb24oJ3F1aXpzdGF0dXMnKS5kb2ModXNlcl9pZCk7CiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxNzsKICAgICAgICAgICAgcmV0dXJuIGdldERvYyh1c2VyX3F1aXpzdGF0dXNSZWYpOwoKICAgICAgICAgIGNhc2UgMTc6CiAgICAgICAgICAgIHVzZXJfcXVpenN0YXR1c1NuYXAgPSBfY29udGV4dC5zZW50OwoKICAgICAgICAgICAgaWYgKCF1c2VyX3F1aXpzdGF0dXNTbmFwLmV4aXN0cygpKSB7CiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDIzOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBpZiBxdWl6c3RhdHVzIGZvciB1c2VyIGV4aXN0LCBpbXBvcnQgc2V0IGZyb20gdXNlciBpbmZvCiAgICAgICAgICAgIHF1aXppbnN0YW5jZSA9IHVzZXJfcXVpenN0YXR1c1NuYXAuZGF0YSgpOwogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCB7CiAgICAgICAgICAgICAgZGVmYXVsdFNldDogZGVmYXVsdFNldCwKICAgICAgICAgICAgICB1c2VyX2lkOiB1c2VyX2lkLAogICAgICAgICAgICAgIHF1aXppbnN0YW5jZTogcXVpemluc3RhbmNlCiAgICAgICAgICAgIH0pOwoKICAgICAgICAgIGNhc2UgMjM6CiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyNTsKICAgICAgICAgICAgcmV0dXJuIHNldERvYyh1c2VyX3F1aXpzdGF0dXNSZWYsIHsKICAgICAgICAgICAgICBxdWl6bGV0dGVyc2V0OiBkZWZhdWx0U2V0LnZhbHVlLAogICAgICAgICAgICAgIGNob3NlbjogW10sCiAgICAgICAgICAgICAgcmV2ZXJzZTogZmFsc2UsCiAgICAgICAgICAgICAgbWF4X2Nob3NlbjogNiwKICAgICAgICAgICAgICBiYWNrc2V0OiBbXSwKICAgICAgICAgICAgICBmb3J3YXJkc2V0OiBbXQogICAgICAgICAgICB9KTsKCiAgICAgICAgICBjYXNlIDI1OgogICAgICAgICAgICAvLyBkZWZhdWx0IHNldHRpbmcKICAgICAgICAgICAgX3F1aXppbnN0YW5jZSA9IHVzZXJfcXVpenN0YXR1c1NuYXAuZGF0YSgpOwogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCB7CiAgICAgICAgICAgICAgZGVmYXVsdFNldDogZGVmYXVsdFNldCwKICAgICAgICAgICAgICB1c2VyX2lkOiB1c2VyX2lkLAogICAgICAgICAgICAgIHF1aXppbnN0YW5jZTogX3F1aXppbnN0YW5jZQogICAgICAgICAgICB9KTsKCiAgICAgICAgICBjYXNlIDI3OgogICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNDE7CiAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgIGNhc2UgMjk6CiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzMTsKICAgICAgICAgICAgcmV0dXJuIGRiLmNvbGxlY3Rpb24oJ1VzZXJzJykuYWRkKHsKICAgICAgICAgICAgICB1c2VyX25hbWU6IHVzZXIKICAgICAgICAgICAgfSk7CgogICAgICAgICAgY2FzZSAzMToKICAgICAgICAgICAgbmV3U25hcCA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgIF91c2VyX2lkID0gbmV3U25hcC5pZDsgLy8gY3JlYXRlIG5ldyBxdWl6c3RhdHVzIHN1YmNvbGxlY3Rpb24gZm9yIHVzZXIKCiAgICAgICAgICAgIF91c2VyX3F1aXpzdGF0dXNSZWYgPSBkYi5jb2xsZWN0aW9uKCdVc2VycycpLmRvYygncXVpenN0YXR1cycpLmNvbGxlY3Rpb24oJ3F1aXpzdGF0dXMnKS5kb2MoX3VzZXJfaWQpOwogICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzY7CiAgICAgICAgICAgIHJldHVybiBzZXREb2MoX3VzZXJfcXVpenN0YXR1c1JlZiwgewogICAgICAgICAgICAgIHF1aXpsZXR0ZXJzZXQ6IGRlZmF1bHRTZXQudmFsdWUsCiAgICAgICAgICAgICAgY2hvc2VuOiBbXSwKICAgICAgICAgICAgICByZXZlcnNlOiBmYWxzZSwKICAgICAgICAgICAgICBtYXhfY2hvc2VuOiA2LAogICAgICAgICAgICAgIGJhY2tzZXQ6IFtdLAogICAgICAgICAgICAgIGZvcndhcmRzZXQ6IFtdCiAgICAgICAgICAgIH0pOwoKICAgICAgICAgIGNhc2UgMzY6CiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzODsKICAgICAgICAgICAgcmV0dXJuIGdldERvYyhfdXNlcl9xdWl6c3RhdHVzUmVmKTsKCiAgICAgICAgICBjYXNlIDM4OgogICAgICAgICAgICBfdXNlcl9xdWl6c3RhdHVzU25hcCA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgIF9xdWl6aW5zdGFuY2UyID0gX3VzZXJfcXVpenN0YXR1c1NuYXAuZGF0YSgpOwogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCB7CiAgICAgICAgICAgICAgZGVmYXVsdFNldDogZGVmYXVsdFNldCwKICAgICAgICAgICAgICB1c2VyX2lkOiBfdXNlcl9pZCwKICAgICAgICAgICAgICBxdWl6aW5zdGFuY2U6IF9xdWl6aW5zdGFuY2UyCiAgICAgICAgICAgIH0pOwoKICAgICAgICAgIGNhc2UgNDE6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZSk7CiAgfSkpOwoKICByZXR1cm4gZnVuY3Rpb24gaW1wb3J0U2V0KF94LCBfeDIpIHsKICAgIHJldHVybiBfcmVmLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfTsKfSgpOwoKZXhwb3J0IGRlZmF1bHQgaW1wb3J0U2V0Ow=="},{"version":3,"sources":["/Users/eugenekang/Documents/GitHub/htmlgame/quizengine_test/src/composables/quizlibrary/importSet.js"],"names":["db","ref","doc","setDoc","getDoc","importSet","quiz_id","user","defaultSet","userRef","collection","where","setRef","get","docs","userSnap","defaultSnap","value","data","user_id","id","user_quizstatusRef","user_quizstatusSnap","exists","quizinstance","quizletterset","chosen","reverse","max_chosen","backset","forwardset","add","user_name","newSnap"],"mappings":"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","sourcesContent":["import { db } from '../../firestoreDB'\nimport { ref } from 'vue'\nimport { doc, setDoc, getDoc } from 'firebase/firestore'\n\nconst importSet = async (quiz_id, user) => {\n    const defaultSet = ref({})\n\n    // import set from db\n    const userRef = db.collection('Users').where('user_name', '==', user)\n    const setRef = doc(db, 'QuizSet', quiz_id)\n\n    const userSnap = await (await userRef.get()).docs[0]\n    // get defaultSet\n    const defaultSnap = await getDoc(setRef)\n    defaultSet.value = defaultSnap.data()\n\n    if (userSnap) {\n        // if user already in Users\n        const user_id = userSnap.id\n\n        const user_quizstatusRef = db.collection('Users').doc('quizstatus')\n            .collection('quizstatus').doc(user_id)\n        const user_quizstatusSnap = await getDoc(user_quizstatusRef)\n        if (user_quizstatusSnap.exists()) {\n            // if quizstatus for user exist, import set from user info\n            const quizinstance = user_quizstatusSnap.data()\n\n            return {\n                defaultSet,\n                user_id,\n                quizinstance\n            }\n        } else {\n            // else, create new quizstatus subcollection for user\n            await setDoc(user_quizstatusRef, {\n                quizletterset: defaultSet.value,\n                chosen: [],\n                reverse: false,\n                max_chosen: 6,\n                backset: [],\n                forwardset: []\n            }) // default setting\n\n            const quizinstance = user_quizstatusSnap.data()\n\n            return {\n                defaultSet,\n                user_id,\n                quizinstance\n            }\n        }\n    } else {\n        // else, create new user info\n        const newSnap = await db.collection('Users').add({\n            user_name: user\n        })\n\n        const user_id = newSnap.id\n\n        // create new quizstatus subcollection for user\n        const user_quizstatusRef = db.collection('Users').doc('quizstatus')\n            .collection('quizstatus').doc(user_id)\n        \n        await setDoc(user_quizstatusRef, {\n                quizletterset: defaultSet.value,\n                chosen: [],\n                reverse: false,\n                max_chosen: 6,\n                backset: [],\n                forwardset: []\n        }) // default setting\n\n        const user_quizstatusSnap = await getDoc(user_quizstatusRef)\n        const quizinstance = user_quizstatusSnap.data()\n\n        return {\n            defaultSet,\n            user_id,\n            quizinstance\n        }\n    }\n}\n\nexport default importSet"]}]}