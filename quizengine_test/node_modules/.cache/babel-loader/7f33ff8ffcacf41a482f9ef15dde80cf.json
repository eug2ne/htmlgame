{"remainingRequest":"/Users/eugenekang/Documents/GitHub/htmlgame/quizengine_test/node_modules/babel-loader/lib/index.js!/Users/eugenekang/Documents/GitHub/htmlgame/quizengine_test/src/composables/quizlibrary/library.js","dependencies":[{"path":"/Users/eugenekang/Documents/GitHub/htmlgame/quizengine_test/src/composables/quizlibrary/library.js","mtime":1642949743506},{"path":"/Users/eugenekang/Documents/GitHub/htmlgame/quizengine_test/babel.config.js","mtime":1642949743496},{"path":"/Users/eugenekang/Documents/GitHub/htmlgame/quizengine_test/node_modules/cache-loader/dist/cjs.js","mtime":1643433884430},{"path":"/Users/eugenekang/Documents/GitHub/htmlgame/quizengine_test/node_modules/babel-loader/lib/index.js","mtime":1643433884386}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnZhbHVlcy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoLmpzIjsKCnZhciBsaWJyYXJ5ID0gZnVuY3Rpb24gbGlicmFyeSgpIHsKICAvLyByZWdyZXNzaW9uIGZ1bmMKICAvLyB1c2VkIGZvciBtZXJnZQogIHZhciByZWdyZXNzaW9uID0gZnVuY3Rpb24gcmVncmVzc2lvbihzZXQsIG1heF9jb2wsIHJvdywgcmV2ZXJzZSkgewogICAgaWYgKHJldmVyc2UpIHsKICAgICAgLy8gcmV2ZXJzZS1yZWdyZXNzaW9uCiAgICAgIGlmIChzZXRbcm93XVttYXhfY29sIC0gMV0gPT0gdW5kZWZpbmVkIHx8IHNldFtyb3ddW21heF9jb2wgLSAxXS5pc1dvcmQpIHsKICAgICAgICBzZXRbcm93XVttYXhfY29sXS5sZXR0ZXIgPSAnJzsKICAgICAgfSBlbHNlIHsKICAgICAgICBzZXRbcm93XVttYXhfY29sXS5sZXR0ZXIgPSBzZXRbcm93XVttYXhfY29sIC0gMV0ubGV0dGVyOwogICAgICAgIHJlZ3Jlc3Npb24oc2V0LCBtYXhfY29sIC0gMSwgcm93LCByZXZlcnNlKTsKICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgLy8gbm9ybWFsLXJlZ3Jlc3Npb24KICAgICAgaWYgKHNldFtyb3ddW21heF9jb2wgKyAxXSA9PSB1bmRlZmluZWQgfHwgc2V0W3Jvd11bbWF4X2NvbCArIDFdLmlzV29yZCkgewogICAgICAgIHNldFtyb3ddW21heF9jb2xdLmxldHRlciA9ICcnOwogICAgICB9IGVsc2UgewogICAgICAgIHNldFtyb3ddW21heF9jb2xdLmxldHRlciA9IHNldFtyb3ddW21heF9jb2wgKyAxXS5sZXR0ZXI7CiAgICAgICAgcmVncmVzc2lvbihzZXQsIG1heF9jb2wgKyAxLCByb3csIHJldmVyc2UpOwogICAgICB9CiAgICB9CiAgfTsgLy8gY29tcGFyZSAyIG9iamVjdHMKICAvLyBpZiBpZGVudGljYWwsIHJldHVybiB0cnVlCiAgLy8gZWxzZSwgcmV0dXJuIGZhbHNlCgoKICB2YXIgY29tcGFyZV9vYmogPSBmdW5jdGlvbiBjb21wYXJlX29iaihhLCBiKSB7CiAgICB2YXIgbiA9IDA7CiAgICB2YXIgY29tcGFyZSA9IHRydWU7CgogICAgd2hpbGUgKGNvbXBhcmUgJiYgbiA8IDYpIHsKICAgICAgaWYgKE9iamVjdC52YWx1ZXMoYSlbbl0gPT09IE9iamVjdC52YWx1ZXMoYilbbl0pIHsKICAgICAgICBuID0gbiArIDE7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgY29tcGFyZSA9IGZhbHNlOwogICAgICB9CiAgICB9CgogICAgcmV0dXJuIGNvbXBhcmU7CiAgfTsgLy8gcmVzZXQgZnVuYwoKCiAgdmFyIHJlc2V0ID0gZnVuY3Rpb24gcmVzZXQoc2V0KSB7CiAgICBPYmplY3QudmFsdWVzKHNldCkuZm9yRWFjaChmdW5jdGlvbiAocm93KSB7CiAgICAgIE9iamVjdC52YWx1ZXMocm93KS5mb3JFYWNoKGZ1bmN0aW9uIChjb2wpIHsKICAgICAgICBpZiAoY29sLmlzV29yZCkgey8vIHBhc3MKICAgICAgICB9IGVsc2UgewogICAgICAgICAgY29sLmlzVGFyZ2V0ID0gZmFsc2U7CiAgICAgICAgICBjb2wuaXNDaG9pY2UgPSBmYWxzZTsKICAgICAgICAgIGNvbC5pc0Nob3NlbiA9IGZhbHNlOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9KTsKICAgIHJldHVybiBzZXQ7CiAgfTsKCiAgcmV0dXJuIHsKICAgIHJlZ3Jlc3Npb246IHJlZ3Jlc3Npb24sCiAgICBjb21wYXJlX29iajogY29tcGFyZV9vYmosCiAgICByZXNldDogcmVzZXQKICB9Owp9OwoKZXhwb3J0IGRlZmF1bHQgbGlicmFyeTs="},{"version":3,"sources":["/Users/eugenekang/Documents/GitHub/htmlgame/quizengine_test/src/composables/quizlibrary/library.js"],"names":["library","regression","set","max_col","row","reverse","undefined","isWord","letter","compare_obj","a","b","n","compare","Object","values","reset","forEach","col","isTarget","isChoice","isChosen"],"mappings":"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","sourcesContent":["const library = () => {\n    // regression func\n    // used for merge\n    const regression = (set, max_col, row, reverse) => {\n        if (reverse) {\n            // reverse-regression\n            if (set[row][max_col-1] == undefined||\n                set[row][max_col-1].isWord) {\n                set[row][max_col].letter = ''\n            } else {\n                set[row][max_col].letter = set[row][max_col-1].letter\n                    regression(set, max_col-1, row, reverse)\n            }\n        } else {\n            // normal-regression\n            if (set[row][max_col+1] == undefined||\n                set[row][max_col+1].isWord) {\n                set[row][max_col].letter = ''\n            } else {\n                set[row][max_col].letter = set[row][max_col+1].letter\n                regression(set, max_col+1, row, reverse)\n            }\n        }   \n    }\n\n    // compare 2 objects\n    // if identical, return true\n    // else, return false\n    const compare_obj = (a, b) => {\n        let n = 0\n        let compare = true\n        while (compare && n < 6) {\n          if (Object.values(a)[n] === Object.values(b)[n]) {\n            n = n + 1\n          } else {\n            compare = false\n          }\n        }\n\n        return compare\n    }\n\n    // reset func\n    const reset = (set) => {\n        Object.values(set).forEach((row) => {\n            Object.values(row).forEach((col) => {\n                if (col.isWord) {\n                    // pass\n                } else {\n                    col.isTarget = false\n                    col.isChoice = false\n                    col.isChosen = false\n                }\n            })\n        })\n\n        return set\n    }\n\n    return { regression, compare_obj, reset }\n}\n\nexport default library"]}]}