{"remainingRequest":"/Users/eugenekang/Documents/GitHub/htmlgame/quizengine_test/node_modules/babel-loader/lib/index.js!/Users/eugenekang/Documents/GitHub/htmlgame/quizengine_test/src/composables/quizlibrary/quizengine.js","dependencies":[{"path":"/Users/eugenekang/Documents/GitHub/htmlgame/quizengine_test/src/composables/quizlibrary/quizengine.js","mtime":1642949743506},{"path":"/Users/eugenekang/Documents/GitHub/htmlgame/quizengine_test/babel.config.js","mtime":1642949743496},{"path":"/Users/eugenekang/Documents/GitHub/htmlgame/quizengine_test/node_modules/cache-loader/dist/cjs.js","mtime":1643433884430},{"path":"/Users/eugenekang/Documents/GitHub/htmlgame/quizengine_test/node_modules/babel-loader/lib/index.js","mtime":1643433884386}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5jbHVkZXMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaW5jbHVkZXMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5jb25jYXQuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbmQtaW5kZXguanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudmFsdWVzLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmtleXMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuZXhlYy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zcGxpdC5qcyI7CmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7CmltcG9ydCBsaWJyYXJ5IGZyb20gJy4vbGlicmFyeSc7CmltcG9ydCBiYWNrZm9ydGggZnJvbSAnLi9iYWNrZm9ydGgnOwppbXBvcnQgbWVyZ2VsaXN0IGZyb20gJy4uLy4uL2Fzc2V0cy9sb2FkbGlzdHMvdmFsaWRfbWVyZ2V3b3JkbGlzdC5qc29uJzsKaW1wb3J0IHdvcmRsaXN0IGZyb20gJy4uLy4uL2Fzc2V0cy9sb2FkbGlzdHMvd29yZGxpc3QuanNvbic7Cgp2YXIgcXVpemVuZ2luZSA9IGZ1bmN0aW9uIHF1aXplbmdpbmUocmV2ZXJzZSkgewogIC8vIGltcG9ydCBsaWJyYXJ5CiAgdmFyIF9saWJyYXJ5ID0gbGlicmFyeSgpLAogICAgICByZWdyZXNzaW9uID0gX2xpYnJhcnkucmVncmVzc2lvbiwKICAgICAgY29tcGFyZV9vYmogPSBfbGlicmFyeS5jb21wYXJlX29iaiwKICAgICAgcmVzZXQgPSBfbGlicmFyeS5yZXNldDsgLy8gaW1wb3J0IGJhY2tmb3J0aAoKCiAgdmFyIF9iYWNrZm9ydGggPSBiYWNrZm9ydGgoKSwKICAgICAgdXBkYXRlcGFzdFNldCA9IF9iYWNrZm9ydGgudXBkYXRlcGFzdFNldCwKICAgICAgdXBkYXRlZm9yd2FyZFNldCA9IF9iYWNrZm9ydGgudXBkYXRlZm9yd2FyZFNldCwKICAgICAgYmFjayA9IF9iYWNrZm9ydGguYmFjaywKICAgICAgZm9yd2FyZCA9IF9iYWNrZm9ydGguZm9yd2FyZDsgLy8gc2hvd0Nob2ljZSBmdW5jcwoKCiAgdmFyIHVzZXNob3dNZXJnZSA9IGZ1bmN0aW9uIHVzZXNob3dNZXJnZShzZXQsIHJvdywgY29sKSB7CiAgICBzd2l0Y2ggKGNvbCkgewogICAgICBjYXNlIDA6CiAgICAgICAgc2V0W3Jvd11bY29sICsgMV0uaXNDaG9pY2UgPSB0cnVlOwogICAgICAgIGJyZWFrOwoKICAgICAgY2FzZSAxNDoKICAgICAgICBzZXRbcm93XVtjb2wgLSAxXS5pc0Nob2ljZSA9IHRydWU7CiAgICAgICAgYnJlYWs7CgogICAgICBkZWZhdWx0OgogICAgICAgIHNldFtyb3ddW2NvbCAtIDFdLmlzQ2hvaWNlID0gdHJ1ZTsKICAgICAgICBzZXRbcm93XVtjb2wgKyAxXS5pc0Nob2ljZSA9IHRydWU7CiAgICB9CgogICAgcmV0dXJuIHNldDsKICB9OwoKICB2YXIgdXNlc2hvd1dvcmQgPSBmdW5jdGlvbiB1c2VzaG93V29yZChzZXQsIHJvdywgY29sKSB7CiAgICB0cnkgewogICAgICBzZXRbcm93XVtjb2wgKyAxXS5pc0Nob2ljZSA9IHRydWU7CiAgICAgIHNldFtyb3cgKyAxXVtjb2xdLmlzQ2hvaWNlID0gdHJ1ZTsKICAgICAgc2V0W3JvdyArIDFdW2NvbCArIDFdLmlzQ2hvaWNlID0gdHJ1ZTsKICAgICAgc2V0W3JvdyArIDJdW2NvbF0uaXNDaG9pY2UgPSB0cnVlOwogICAgICBzZXRbcm93ICsgMl1bY29sICsgMV0uaXNDaG9pY2UgPSB0cnVlOwogICAgfSBjYXRjaCAoRXJyb3IpIHsKICAgICAgLy8gV29yZFNwYWNlRXJyb3IKICAgICAgdGhyb3cgJ1dvcmRTcGFjZUVycm9yJzsKICAgIH0KCiAgICByZXR1cm4gc2V0OwogIH07IC8vIG1lcmdlIGZ1bmMKCgogIHZhciB1c2VNZXJnZSA9IGZ1bmN0aW9uIHVzZU1lcmdlKGFyciwgc2V0LCBwYXN0U2V0KSB7CiAgICBjb25zb2xlLmxvZygndXNlbWVyZ2UnKTsKCiAgICBpZiAobWVyZ2VsaXN0LnZhbGlkW2FyclswXS5sZXR0ZXJdLmluY2x1ZGVzKGFyclsxXS5sZXR0ZXIpKSB7CiAgICAgIC8vIHVwZGF0ZSBwYXN0c2V0CiAgICAgIHVwZGF0ZXBhc3RTZXQocGFzdFNldCwgcmVzZXQoc2V0KSk7CgogICAgICBpZiAocmV2ZXJzZSkgewogICAgICAgIC8vIGFwcGx5IHJldmVyc2UtZW5naW5lCiAgICAgICAgc2V0W2FyclswXS5yb3ddW01hdGgubWF4KGFyclswXS5jb2wsIGFyclsxXS5jb2wpXS5sZXR0ZXIgPSBtZXJnZWxpc3QubWVyZ2VbIiIuY29uY2F0KGFyclswXS5sZXR0ZXIsICIsIikuY29uY2F0KGFyclsxXS5sZXR0ZXIpXTsKICAgICAgICBzZXRbYXJyWzBdLnJvd11bTWF0aC5taW4oYXJyWzBdLmNvbCwgYXJyWzFdLmNvbCldLmxldHRlciA9ICcnOyAvLyByZXZlcnNlLXJlZ3Jlc3Npb24oKQoKICAgICAgICByZWdyZXNzaW9uKHNldCwgTWF0aC5taW4oYXJyWzBdLmNvbCwgYXJyWzFdLmNvbCksIGFyclswXS5yb3csIHJldmVyc2UpOwogICAgICB9IGVsc2UgewogICAgICAgIC8vIGFwcGx5IG5vcm1hbC1lbmdpbmUKICAgICAgICBzZXRbYXJyWzBdLnJvd11bTWF0aC5taW4oYXJyWzBdLmNvbCwgYXJyWzFdLmNvbCldLmxldHRlciA9IG1lcmdlbGlzdC5tZXJnZVsiIi5jb25jYXQoYXJyWzBdLmxldHRlciwgIiwiKS5jb25jYXQoYXJyWzFdLmxldHRlcildOwogICAgICAgIHNldFthcnJbMF0ucm93XVtNYXRoLm1heChhcnJbMF0uY29sLCBhcnJbMV0uY29sKV0ubGV0dGVyID0gJyc7IC8vIG5vcm1hbC1yZWdyZXNzaW9uKCkKCiAgICAgICAgcmVncmVzc2lvbihzZXQsIE1hdGgubWF4KGFyclswXS5jb2wsIGFyclsxXS5jb2wpLCBhcnJbMF0ucm93LCByZXZlcnNlKTsKICAgICAgfSAvLyByZXNldCgpCgoKICAgICAgcmVzZXQoc2V0KTsKICAgIH0gZWxzZSB7CiAgICAgIC8vIE1lcmdlRXJyb3IKICAgICAgdGhyb3cgRXJyb3IoJ01lcmdlRXJyb3InKTsKICAgIH0KCiAgICByZXR1cm4gYXJyLCBzZXQsIHBhc3RTZXQ7CiAgfTsgLy8gd29yZCBmdW5jCgoKICB2YXIgdXNlV29yZCA9IGZ1bmN0aW9uIHVzZVdvcmQoYXJyLCBzZXQsIHBhc3RTZXQpIHsKICAgIGNvbnNvbGUubG9nKCd1c2V3b3JkJyk7CiAgICB2YXIgd29yZHNwYWNlID0gewogICAgICAnMCwwJzogbnVsbCwKICAgICAgJzEsMCc6IG51bGwsCiAgICAgICcwLDEnOiBudWxsLAogICAgICAnMSwxJzogbnVsbCwKICAgICAgJzAsMic6IG51bGwsCiAgICAgICcxLDInOiBudWxsCiAgICB9OwogICAgYXJyLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHsKICAgICAgaWYgKGVsZW1lbnQubGV0dGVyID09ICcnKSB7CiAgICAgICAgd29yZHNwYWNlWyIiLmNvbmNhdChlbGVtZW50LmNvbCAtIGFyclswXS5jb2wsICIsIikuY29uY2F0KGVsZW1lbnQucm93IC0gYXJyWzBdLnJvdyldID0gbnVsbDsKICAgICAgfSBlbHNlIHsKICAgICAgICB3b3Jkc3BhY2VbIiIuY29uY2F0KGVsZW1lbnQuY29sIC0gYXJyWzBdLmNvbCwgIiwiKS5jb25jYXQoZWxlbWVudC5yb3cgLSBhcnJbMF0ucm93KV0gPSBlbGVtZW50LmxldHRlcjsKICAgICAgfQogICAgfSk7CiAgICB2YXIgaW5kZXggPSBPYmplY3QudmFsdWVzKHdvcmRsaXN0KS5maW5kSW5kZXgoZnVuY3Rpb24gKGVsZW1lbnQpIHsKICAgICAgcmV0dXJuIGNvbXBhcmVfb2JqKGVsZW1lbnQsIHdvcmRzcGFjZSk7CiAgICB9KTsKCiAgICBpZiAoaW5kZXggIT0gLTEpIHsKICAgICAgLy8gdXBkYXRlIHBhc3RzZXQKICAgICAgdXBkYXRlcGFzdFNldChwYXN0U2V0LCByZXNldChzZXQpKTsKICAgICAgc2V0W2FyclswXS5yb3ddW2FyclswXS5jb2xdLmxldHRlciA9IE9iamVjdC5rZXlzKHdvcmRsaXN0KVtpbmRleF07CiAgICAgIHNldFthcnJbMF0ucm93XVthcnJbMF0uY29sXS5pc1dvcmQgPSB0cnVlOyAvLyBkZWxldGUgbGV0dGVyIGluIHdvcmRzcGFjZQoKICAgICAgZGVsZXRlIHNldFthcnJbMF0ucm93XVthcnJbMF0uY29sICsgMV07CiAgICAgIGRlbGV0ZSBzZXRbYXJyWzBdLnJvdyArIDFdW2FyclswXS5jb2xdOwogICAgICBkZWxldGUgc2V0W2FyclswXS5yb3cgKyAxXVthcnJbMF0uY29sICsgMV07CiAgICAgIGRlbGV0ZSBzZXRbYXJyWzBdLnJvdyArIDJdW2FyclswXS5jb2xdOwogICAgICBkZWxldGUgc2V0W2FyclswXS5yb3cgKyAyXVthcnJbMF0uY29sICsgMV07CiAgICB9IGVsc2UgewogICAgICAvLyBXb3JkRXJyb3IKICAgICAgdGhyb3cgRXJyb3IoJ1dvcmRFcnJvcicpOwogICAgfQoKICAgIHJldHVybiBhcnIsIHNldCwgcGFzdFNldDsKICB9OyAvL3NwYWNlIGZ1bmMKCgogIHZhciB1c2VTcGFjZSA9IGZ1bmN0aW9uIHVzZVNwYWNlKHdvcmRzcGFjZSwgc2V0LCB0YXJnZXQsIHBhc3RTZXQpIHsKICAgIGNvbnNvbGUubG9nKCd1c2VzcGFjZScpOwoKICAgIGlmIChfLnNvbWUoT2JqZWN0LnZhbHVlcyh3b3JkbGlzdCksIHdvcmRzcGFjZSkpIHsKICAgICAgLy8gU3BhY2VFcnJvcgogICAgICB0aHJvdyBFcnJvcignU3BhY2VFcnJvcicpOwogICAgfSBlbHNlIHsKICAgICAgLy8gdXBkYXRlIHBhc3RzZXQKICAgICAgdXBkYXRlcGFzdFNldChwYXN0U2V0LCByZXNldChzZXQpKTsKCiAgICAgIGZvciAodmFyIGNvb3JkIGluIHdvcmRzcGFjZSkgewogICAgICAgIHZhciB4ID0gcGFyc2VJbnQoY29vcmQuc3BsaXQoJywnKVswXSk7CiAgICAgICAgdmFyIHkgPSBwYXJzZUludChjb29yZC5zcGxpdCgnLCcpWzFdKTsKICAgICAgICBzZXRbdGFyZ2V0LnJvdyArIHldW3RhcmdldC5jb2wgKyB4XS5sZXR0ZXIgPSAnJzsKICAgICAgfQogICAgfQoKICAgIHJldHVybiBzZXQsIHBhc3RTZXQ7CiAgfTsKCiAgcmV0dXJuIHsKICAgIGJhY2s6IGJhY2ssCiAgICBmb3J3YXJkOiBmb3J3YXJkLAogICAgdXNlc2hvd01lcmdlOiB1c2VzaG93TWVyZ2UsCiAgICB1c2VzaG93V29yZDogdXNlc2hvd1dvcmQsCiAgICB1c2VNZXJnZTogdXNlTWVyZ2UsCiAgICB1c2VXb3JkOiB1c2VXb3JkLAogICAgdXNlU3BhY2U6IHVzZVNwYWNlCiAgfTsKfTsKCmV4cG9ydCBkZWZhdWx0IHF1aXplbmdpbmU7"},{"version":3,"sources":["/Users/eugenekang/Documents/GitHub/htmlgame/quizengine_test/src/composables/quizlibrary/quizengine.js"],"names":["_","library","backforth","mergelist","wordlist","quizengine","reverse","regression","compare_obj","reset","updatepastSet","updateforwardSet","back","forward","useshowMerge","set","row","col","isChoice","useshowWord","Error","useMerge","arr","pastSet","console","log","valid","letter","includes","Math","max","merge","min","useWord","wordspace","forEach","element","index","Object","values","findIndex","keys","isWord","useSpace","target","some","coord","x","parseInt","split","y"],"mappings":";;;;;;;;;;AAAA,OAAOA,CAAP,MAAc,QAAd;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,SAAP,MAAsB,iDAAtB;AACA,OAAOC,QAAP,MAAqB,sCAArB;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,OAAD,EAAa;AAC5B;AACA,iBAA2CL,OAAO,EAAlD;AAAA,MAAQM,UAAR,YAAQA,UAAR;AAAA,MAAoBC,WAApB,YAAoBA,WAApB;AAAA,MAAiCC,KAAjC,YAAiCA,KAAjC,CAF4B,CAI5B;;;AACA,mBAKIP,SAAS,EALb;AAAA,MACIQ,aADJ,cACIA,aADJ;AAAA,MAEIC,gBAFJ,cAEIA,gBAFJ;AAAA,MAGIC,IAHJ,cAGIA,IAHJ;AAAA,MAIIC,OAJJ,cAIIA,OAJJ,CAL4B,CAY5B;;;AACA,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,GAAD,EAAMC,GAAN,EAAWC,GAAX,EAAmB;AACpC,YAAQA,GAAR;AACI,WAAK,CAAL;AACIF,QAAAA,GAAG,CAACC,GAAD,CAAH,CAASC,GAAG,GAAC,CAAb,EAAgBC,QAAhB,GAA2B,IAA3B;AACA;;AAEJ,WAAK,EAAL;AACIH,QAAAA,GAAG,CAACC,GAAD,CAAH,CAASC,GAAG,GAAC,CAAb,EAAgBC,QAAhB,GAA2B,IAA3B;AACA;;AAEJ;AACIH,QAAAA,GAAG,CAACC,GAAD,CAAH,CAASC,GAAG,GAAC,CAAb,EAAgBC,QAAhB,GAA2B,IAA3B;AACAH,QAAAA,GAAG,CAACC,GAAD,CAAH,CAASC,GAAG,GAAC,CAAb,EAAgBC,QAAhB,GAA2B,IAA3B;AAXR;;AAcA,WAAOH,GAAP;AACH,GAhBD;;AAkBA,MAAMI,WAAW,GAAG,SAAdA,WAAc,CAACJ,GAAD,EAAMC,GAAN,EAAWC,GAAX,EAAmB;AACnC,QAAI;AACAF,MAAAA,GAAG,CAACC,GAAD,CAAH,CAASC,GAAG,GAAC,CAAb,EAAgBC,QAAhB,GAA2B,IAA3B;AACAH,MAAAA,GAAG,CAACC,GAAG,GAAC,CAAL,CAAH,CAAWC,GAAX,EAAgBC,QAAhB,GAA2B,IAA3B;AACAH,MAAAA,GAAG,CAACC,GAAG,GAAC,CAAL,CAAH,CAAWC,GAAG,GAAC,CAAf,EAAkBC,QAAlB,GAA6B,IAA7B;AACAH,MAAAA,GAAG,CAACC,GAAG,GAAC,CAAL,CAAH,CAAWC,GAAX,EAAgBC,QAAhB,GAA2B,IAA3B;AACAH,MAAAA,GAAG,CAACC,GAAG,GAAC,CAAL,CAAH,CAAWC,GAAG,GAAC,CAAf,EAAkBC,QAAlB,GAA6B,IAA7B;AACH,KAND,CAME,OAAOE,KAAP,EAAc;AACZ;AACA,YAAM,gBAAN;AACH;;AAED,WAAOL,GAAP;AACH,GAbD,CA/B4B,CA8C5B;;;AACA,MAAMM,QAAQ,GAAG,SAAXA,QAAW,CAACC,GAAD,EAAMP,GAAN,EAAWQ,OAAX,EAAuB;AACpCC,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;;AACA,QAAItB,SAAS,CAACuB,KAAV,CAAgBJ,GAAG,CAAC,CAAD,CAAH,CAAOK,MAAvB,EAA+BC,QAA/B,CAAwCN,GAAG,CAAC,CAAD,CAAH,CAAOK,MAA/C,CAAJ,EAA4D;AACxD;AACAjB,MAAAA,aAAa,CAACa,OAAD,EAAUd,KAAK,CAACM,GAAD,CAAf,CAAb;;AAEA,UAAIT,OAAJ,EAAa;AACT;AACAS,QAAAA,GAAG,CAACO,GAAG,CAAC,CAAD,CAAH,CAAON,GAAR,CAAH,CAAgBa,IAAI,CAACC,GAAL,CAASR,GAAG,CAAC,CAAD,CAAH,CAAOL,GAAhB,EAAqBK,GAAG,CAAC,CAAD,CAAH,CAAOL,GAA5B,CAAhB,EAAkDU,MAAlD,GAA2DxB,SAAS,CAAC4B,KAAV,WAAmBT,GAAG,CAAC,CAAD,CAAH,CAAOK,MAA1B,cAAoCL,GAAG,CAAC,CAAD,CAAH,CAAOK,MAA3C,EAA3D;AACAZ,QAAAA,GAAG,CAACO,GAAG,CAAC,CAAD,CAAH,CAAON,GAAR,CAAH,CAAgBa,IAAI,CAACG,GAAL,CAASV,GAAG,CAAC,CAAD,CAAH,CAAOL,GAAhB,EAAqBK,GAAG,CAAC,CAAD,CAAH,CAAOL,GAA5B,CAAhB,EAAkDU,MAAlD,GAA2D,EAA3D,CAHS,CAKT;;AACApB,QAAAA,UAAU,CAACQ,GAAD,EAAMc,IAAI,CAACG,GAAL,CAASV,GAAG,CAAC,CAAD,CAAH,CAAOL,GAAhB,EAAqBK,GAAG,CAAC,CAAD,CAAH,CAAOL,GAA5B,CAAN,EAAwCK,GAAG,CAAC,CAAD,CAAH,CAAON,GAA/C,EAAoDV,OAApD,CAAV;AACH,OAPD,MAOO;AACH;AACAS,QAAAA,GAAG,CAACO,GAAG,CAAC,CAAD,CAAH,CAAON,GAAR,CAAH,CAAgBa,IAAI,CAACG,GAAL,CAASV,GAAG,CAAC,CAAD,CAAH,CAAOL,GAAhB,EAAqBK,GAAG,CAAC,CAAD,CAAH,CAAOL,GAA5B,CAAhB,EAAkDU,MAAlD,GAA2DxB,SAAS,CAAC4B,KAAV,WAAmBT,GAAG,CAAC,CAAD,CAAH,CAAOK,MAA1B,cAAoCL,GAAG,CAAC,CAAD,CAAH,CAAOK,MAA3C,EAA3D;AACAZ,QAAAA,GAAG,CAACO,GAAG,CAAC,CAAD,CAAH,CAAON,GAAR,CAAH,CAAgBa,IAAI,CAACC,GAAL,CAASR,GAAG,CAAC,CAAD,CAAH,CAAOL,GAAhB,EAAqBK,GAAG,CAAC,CAAD,CAAH,CAAOL,GAA5B,CAAhB,EAAkDU,MAAlD,GAA2D,EAA3D,CAHG,CAKH;;AACApB,QAAAA,UAAU,CAACQ,GAAD,EAAMc,IAAI,CAACC,GAAL,CAASR,GAAG,CAAC,CAAD,CAAH,CAAOL,GAAhB,EAAqBK,GAAG,CAAC,CAAD,CAAH,CAAOL,GAA5B,CAAN,EAAwCK,GAAG,CAAC,CAAD,CAAH,CAAON,GAA/C,EAAoDV,OAApD,CAAV;AACH,OAlBuD,CAoBxD;;;AACAG,MAAAA,KAAK,CAACM,GAAD,CAAL;AACH,KAtBD,MAsBO;AACH;AACA,YAAMK,KAAK,CAAC,YAAD,CAAX;AACH;;AAED,WAAOE,GAAG,EAAEP,GAAF,EAAOQ,OAAjB;AACH,GA9BD,CA/C4B,CA+E5B;;;AACA,MAAMU,OAAO,GAAG,SAAVA,OAAU,CAACX,GAAD,EAAMP,GAAN,EAAWQ,OAAX,EAAuB;AACnCC,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACA,QAAIS,SAAS,GAAG;AAAC,aAAM,IAAP;AAAa,aAAM,IAAnB;AAAyB,aAAM,IAA/B;AAAqC,aAAM,IAA3C;AAAiD,aAAM,IAAvD;AAA6D,aAAM;AAAnE,KAAhB;AAEAZ,IAAAA,GAAG,CAACa,OAAJ,CAAY,UAAAC,OAAO,EAAI;AACnB,UAAIA,OAAO,CAACT,MAAR,IAAkB,EAAtB,EAA0B;AACtBO,QAAAA,SAAS,WAAIE,OAAO,CAACnB,GAAR,GAAYK,GAAG,CAAC,CAAD,CAAH,CAAOL,GAAvB,cAA8BmB,OAAO,CAACpB,GAAR,GAAYM,GAAG,CAAC,CAAD,CAAH,CAAON,GAAjD,EAAT,GAAmE,IAAnE;AACH,OAFD,MAEO;AACHkB,QAAAA,SAAS,WAAIE,OAAO,CAACnB,GAAR,GAAYK,GAAG,CAAC,CAAD,CAAH,CAAOL,GAAvB,cAA8BmB,OAAO,CAACpB,GAAR,GAAYM,GAAG,CAAC,CAAD,CAAH,CAAON,GAAjD,EAAT,GAAmEoB,OAAO,CAACT,MAA3E;AACH;AACJ,KAND;AAQA,QAAMU,KAAK,GAAGC,MAAM,CAACC,MAAP,CAAcnC,QAAd,EAAwBoC,SAAxB,CAAkC,UAAAJ,OAAO;AAAA,aAAI5B,WAAW,CAAC4B,OAAD,EAAUF,SAAV,CAAf;AAAA,KAAzC,CAAd;;AACA,QAAIG,KAAK,IAAI,CAAC,CAAd,EAAiB;AACb;AACA3B,MAAAA,aAAa,CAACa,OAAD,EAAUd,KAAK,CAACM,GAAD,CAAf,CAAb;AAEAA,MAAAA,GAAG,CAACO,GAAG,CAAC,CAAD,CAAH,CAAON,GAAR,CAAH,CAAgBM,GAAG,CAAC,CAAD,CAAH,CAAOL,GAAvB,EAA4BU,MAA5B,GAAqCW,MAAM,CAACG,IAAP,CAAYrC,QAAZ,EAAsBiC,KAAtB,CAArC;AACAtB,MAAAA,GAAG,CAACO,GAAG,CAAC,CAAD,CAAH,CAAON,GAAR,CAAH,CAAgBM,GAAG,CAAC,CAAD,CAAH,CAAOL,GAAvB,EAA4ByB,MAA5B,GAAqC,IAArC,CALa,CAOb;;AACA,aAAO3B,GAAG,CAACO,GAAG,CAAC,CAAD,CAAH,CAAON,GAAR,CAAH,CAAgBM,GAAG,CAAC,CAAD,CAAH,CAAOL,GAAP,GAAW,CAA3B,CAAP;AACA,aAAOF,GAAG,CAACO,GAAG,CAAC,CAAD,CAAH,CAAON,GAAP,GAAW,CAAZ,CAAH,CAAkBM,GAAG,CAAC,CAAD,CAAH,CAAOL,GAAzB,CAAP;AACA,aAAOF,GAAG,CAACO,GAAG,CAAC,CAAD,CAAH,CAAON,GAAP,GAAW,CAAZ,CAAH,CAAkBM,GAAG,CAAC,CAAD,CAAH,CAAOL,GAAP,GAAW,CAA7B,CAAP;AACA,aAAOF,GAAG,CAACO,GAAG,CAAC,CAAD,CAAH,CAAON,GAAP,GAAW,CAAZ,CAAH,CAAkBM,GAAG,CAAC,CAAD,CAAH,CAAOL,GAAzB,CAAP;AACA,aAAOF,GAAG,CAACO,GAAG,CAAC,CAAD,CAAH,CAAON,GAAP,GAAW,CAAZ,CAAH,CAAkBM,GAAG,CAAC,CAAD,CAAH,CAAOL,GAAP,GAAW,CAA7B,CAAP;AACH,KAbD,MAaO;AACH;AACA,YAAMG,KAAK,CAAC,WAAD,CAAX;AACH;;AAED,WAAOE,GAAG,EAAEP,GAAF,EAAOQ,OAAjB;AACH,GAhCD,CAhF4B,CAkH5B;;;AACA,MAAMoB,QAAQ,GAAG,SAAXA,QAAW,CAACT,SAAD,EAAYnB,GAAZ,EAAiB6B,MAAjB,EAAyBrB,OAAzB,EAAqC;AAClDC,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;;AACA,QAAIzB,CAAC,CAAC6C,IAAF,CAAOP,MAAM,CAACC,MAAP,CAAcnC,QAAd,CAAP,EAAgC8B,SAAhC,CAAJ,EAAgD;AAC5C;AACA,YAAMd,KAAK,CAAC,YAAD,CAAX;AACH,KAHD,MAGO;AACH;AACAV,MAAAA,aAAa,CAACa,OAAD,EAAUd,KAAK,CAACM,GAAD,CAAf,CAAb;;AAEA,WAAK,IAAI+B,KAAT,IAAkBZ,SAAlB,EAA6B;AACzB,YAAIa,CAAC,GAAGC,QAAQ,CAACF,KAAK,CAACG,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAAD,CAAhB;AACA,YAAIC,CAAC,GAAGF,QAAQ,CAACF,KAAK,CAACG,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAAD,CAAhB;AAEAlC,QAAAA,GAAG,CAAC6B,MAAM,CAAC5B,GAAP,GAAWkC,CAAZ,CAAH,CAAkBN,MAAM,CAAC3B,GAAP,GAAW8B,CAA7B,EAAgCpB,MAAhC,GAAyC,EAAzC;AACH;AACJ;;AAED,WAAOZ,GAAG,EAAEQ,OAAZ;AACH,GAlBD;;AAoBA,SAAO;AACHX,IAAAA,IAAI,EAAJA,IADG;AAEHC,IAAAA,OAAO,EAAPA,OAFG;AAGHC,IAAAA,YAAY,EAAZA,YAHG;AAIHK,IAAAA,WAAW,EAAXA,WAJG;AAKHE,IAAAA,QAAQ,EAARA,QALG;AAMHY,IAAAA,OAAO,EAAPA,OANG;AAOHU,IAAAA,QAAQ,EAARA;AAPG,GAAP;AASH,CAhJD;;AAkJA,eAAetC,UAAf","sourcesContent":["import _ from 'lodash'\nimport library from './library'\nimport backforth from './backforth'\nimport mergelist from '../../assets/loadlists/valid_mergewordlist.json'\nimport wordlist from '../../assets/loadlists/wordlist.json'\n\nconst quizengine = (reverse) => { \n    // import library\n    const { regression, compare_obj, reset } = library()\n\n    // import backforth\n    const {\n        updatepastSet,\n        updateforwardSet,\n        back,\n        forward\n    } = backforth()\n\n    // showChoice funcs\n    const useshowMerge = (set, row, col) => {\n        switch (col) {\n            case 0:\n                set[row][col+1].isChoice = true\n                break\n  \n            case 14:\n                set[row][col-1].isChoice = true\n                break\n  \n            default:\n                set[row][col-1].isChoice = true\n                set[row][col+1].isChoice = true\n        }\n\n        return set\n    }\n\n    const useshowWord = (set, row, col) => {\n        try {\n            set[row][col+1].isChoice = true\n            set[row+1][col].isChoice = true\n            set[row+1][col+1].isChoice = true\n            set[row+2][col].isChoice = true\n            set[row+2][col+1].isChoice = true\n        } catch (Error) {\n            // WordSpaceError\n            throw 'WordSpaceError'\n        }\n\n        return set\n    }\n\n    // merge func\n    const useMerge = (arr, set, pastSet) => {\n        console.log('usemerge')\n        if (mergelist.valid[arr[0].letter].includes(arr[1].letter)) {\n            // update pastset\n            updatepastSet(pastSet, reset(set))\n\n            if (reverse) {\n                // apply reverse-engine\n                set[arr[0].row][Math.max(arr[0].col, arr[1].col)].letter = mergelist.merge[`${arr[0].letter},${arr[1].letter}`]\n                set[arr[0].row][Math.min(arr[0].col, arr[1].col)].letter = ''\n\n                // reverse-regression()\n                regression(set, Math.min(arr[0].col, arr[1].col), arr[0].row, reverse)\n            } else {\n                // apply normal-engine\n                set[arr[0].row][Math.min(arr[0].col, arr[1].col)].letter = mergelist.merge[`${arr[0].letter},${arr[1].letter}`]\n                set[arr[0].row][Math.max(arr[0].col, arr[1].col)].letter = ''\n\n                // normal-regression()\n                regression(set, Math.max(arr[0].col, arr[1].col), arr[0].row, reverse)\n            }\n\n            // reset()\n            reset(set)\n        } else {\n            // MergeError\n            throw Error('MergeError')\n        }\n        \n        return arr, set, pastSet\n    }\n\n    // word func\n    const useWord = (arr, set, pastSet) => {\n        console.log('useword')\n        let wordspace = {'0,0':null, '1,0':null, '0,1':null, '1,1':null, '0,2':null, '1,2':null}\n\n        arr.forEach(element => {\n            if (element.letter == '') {\n                wordspace[`${element.col-arr[0].col},${element.row-arr[0].row}`] = null\n            } else {\n                wordspace[`${element.col-arr[0].col},${element.row-arr[0].row}`] = element.letter\n            }\n        })\n\n        const index = Object.values(wordlist).findIndex(element => compare_obj(element, wordspace))\n        if (index != -1) {\n            // update pastset\n            updatepastSet(pastSet, reset(set))\n\n            set[arr[0].row][arr[0].col].letter = Object.keys(wordlist)[index]\n            set[arr[0].row][arr[0].col].isWord = true\n      \n            // delete letter in wordspace\n            delete set[arr[0].row][arr[0].col+1]\n            delete set[arr[0].row+1][arr[0].col]\n            delete set[arr[0].row+1][arr[0].col+1]\n            delete set[arr[0].row+2][arr[0].col]\n            delete set[arr[0].row+2][arr[0].col+1]\n        } else {\n            // WordError\n            throw Error('WordError')\n        }\n\n        return arr, set, pastSet\n    }\n\n    //space func\n    const useSpace = (wordspace, set, target, pastSet) => {\n        console.log('usespace')\n        if (_.some(Object.values(wordlist), wordspace)) {\n            // SpaceError\n            throw Error('SpaceError')\n        } else {\n            // update pastset\n            updatepastSet(pastSet, reset(set))\n\n            for (let coord in wordspace) {\n                let x = parseInt(coord.split(',')[0])\n                let y = parseInt(coord.split(',')[1])\n      \n                set[target.row+y][target.col+x].letter = ''\n            }\n        }\n\n        return set, pastSet\n    }\n\n    return {\n        back,\n        forward,\n        useshowMerge,\n        useshowWord,\n        useMerge,\n        useWord,\n        useSpace\n    }\n}\n\nexport default quizengine"]}]}